#!/usr/bin/env node

var fs            = require('fs'),
    path          = require('path'),
    request       = require('request'),
    async         = require('async'),
    commander     = require('commander'),
    exec          = require('child_process').exec,
    mkdirp        = require('mkdirp'),
    rimraf        = require('rimraf'),
    stync         = require('stync'),
    deft          = require('../deft'),
    DecompressZip = require('decompress-zip'),
    deftInfo      = parseFile('../package.json');

function readFile(filePath, basePath) {
  basePath = basePath || __dirname;
  return fs.readFileSync(path.join(basePath, filePath), 'utf-8');
}

function parseFile(filePath, basePath) {
  return JSON.parse(readFile(filePath, basePath));
}

function createQuery(url) {
  var query = {
    url: url,
    json: true,
    headers: {
      'User-Agent': 'Deft'
    }
  };

  if (process.env.GITHUB_AUTH_TOKEN) {
    query.auth = {
      user: process.env.GITHUB_AUTH_TOKEN,
      pass: 'x-oauth-basic',
      sendImmediately: true
    };
  }

  return query;
}

commander
  .version(deftInfo.version)
  .option('-c, --config-file <path>', 'specify a config file (defaults to deft.json)')
  .option('-f, --force', 'overwrite files that are already present')
  .option('-o, --outdated', 'check for outdated dependencies (only for dependencies using tags)')
  .parse(process.argv);

var configFile   = commander.configFile || 'deft.json',
    config       = parseFile(configFile, process.cwd()),
    destination  = getDestination(config.destination || 'deft'),
    dependencies = config.dependencies || [],
    tempFiles    = [],
    tempDirs     = [];

function getDestination(configDestination) {
  if (typeof configDestination === 'string') {
    return { '*': configDestination };
  }

  return configDestination;
}

function getDestinationPath(fileName) {
  var extension = path.extname(fileName),
      folder    = destination[extension] || destination[extension.substring(1)] || destination['*'];

  if (!folder) {
    throw 'Unsure where to save file "' + fileName + '"!';
  }

  return path.join(process.cwd(), folder, fileName);
}

function pathExists(p) {
  return (fs.existsSync || path.existsSync)(p);
}

function shouldOverwrite(filePath) {
  if (!pathExists(filePath)) {
    return true;
  }

  return commander.force;
}

function ensureDirectoryExists(p) {
  mkdirp.sync(path.dirname(p));
}

function writeFile(filePath, response, callback) {
  ensureDirectoryExists(filePath);

  var stream = fs.createWriteStream(filePath);
  stream.on('error', callback).on('finish', callback);

  if (typeof response === 'string') {
    stream.write(response, 'base64', function () {
      stream.end();
    });
  } else {
    response.pipe(stream);
  }
}

function copyFile(source, destination, callback) {
  ensureDirectoryExists(destination);

  var stream = fs.createWriteStream(destination);
  fs.createReadStream(source).pipe(stream);
  stream.on('error', callback).on('finish', callback);
}

function randomNumber() {
  return Math.floor(Math.random() * 1000000);
}

function getTempFileName(extension) {
  var fileName;

  do {
    fileName = 'temp' + randomNumber() + '.' + extension;
  } while (pathExists(fileName));

  tempFiles.push(fileName);

  return fileName;
}

function getTempDirName() {
  var dirName;

  do {
    dirName = 'tmp' + randomNumber();
  } while (pathExists(dirName));

  tempDirs.push(dirName);

  return dirName;
}

function waitForDirToExist(path, callback) {
  if (pathExists(path)) {
    callback();
    return;
  }

  setTimeout(function() {
    waitForDirToExist(path, callback);
  }, 250);
}

function isArchiveDependency(dependency) {
  return describesArchive(deft.getFilesFromDependency(dependency));
}

function describesArchive(files) {
  var keys = Object.keys(files);
  return keys.length === 1 && keys[0] === 'archive' && typeof files.archive === 'object';
}

function downloadArchive(dependency, callback) {
  var archive    = deft.getFilesFromDependency(dependency).archive,
      url        = dependency[0],
      type       = archive.type || 'zip',
      files      = deft.getFiles(archive.files);

  var sampleFile = getDestinationPath(files[Object.keys(files)[0]]);
  if (!shouldOverwrite(sampleFile)) {
    stync.write(deft.clipFileName(url) + ' - already present.');
    return callback();
  }

  var fileName   = getTempFileName(type),
      tempDir    = getTempDirName(),
      fileStream = fs.createWriteStream(fileName),
      response   = request(url);

  var message = stync.begin('Downloading ' + deft.clipFileName(url) + '...');
  response.pipe(fileStream);

  response.on('end', function() {
    message.write(' extracting file...');

    switch (type) {
      case 'zip':
        extractZipFile(callback);
        break;

      default:
        throw 'Unrecognized file type: ' + type;
    }
  });

  function extractZipFile(callback) {
    var unzipper = new DecompressZip(fileName);

    unzipper.on('error', callback);
    unzipper.on('extract', function() {
      message.end(' Done.');
      moveFiles(callback);
    });

    unzipper.extract({
      path: tempDir,
      filter: function(file) {
        return file.path in files;
      }
    });
  }

  function moveFiles(callback) {
    waitForDirToExist(tempDir, function() {
      async.each(Object.keys(files), function(file, cb) {
        stync.write('Copying ' + file + '...');
        copyFile(path.join(tempDir, file), getDestinationPath(files[file]), cb);
      }, callback);
    });
  }
}

function downloadDependency(dependency, callback) {
  var files = deft.getFiles(dependency[dependency.length - 1]);

  var download = function (file, source, target, callback) {
    var message = stync.begin('Downloading ' + deft.clipFileName(file) + '...');
    writeFile(target, source, function(err) {
      message.end(' Done.');
      callback(err);
    });
  };

  var retrieveFile = function(file, callback) {
    var url  = deft.getUrl(file, dependency),
        destinationPath = getDestinationPath(files[file]);

    if (shouldOverwrite(destinationPath)) {
      if (url.indexOf('https://api.github.com') === 0) {
        request(createQuery(url), function (err, res, body) {
          if (err) {
            return callback(err);
          }

          if (res.statusCode !== 200) {
            return callback(new Error(JSON.stringify(body)));
          }

          if (Array.isArray(body)) {
            async.each(body, function(descriptor, callback) {
              if (descriptor.type === 'dir' || descriptor.type === 'file') {
                files[descriptor.path] = files[file] + descriptor.path.slice(file.length);
                retrieveFile(descriptor.path, callback);
              } else {
                callback(new Error('Unhandled type of file for "' + descriptor.path + '": ' + descriptor.type));
              }
            }, callback);
          } else {
            download(file, body.content, destinationPath, callback);
          }
        });
      } else {
        download(file, request(url), destinationPath, callback);
      }
    } else {
      stync.write(deft.clipFileName(file) + ' - already present');
    }
  };

  async.each(Object.keys(files), retrieveFile, function(err) {
    callback(err);
  });
}

function checkUpToDate(dependency, callback) {
  var url = deft.getTagsUrl(dependency),
      tag = deft.getWantedTag(dependency);

  if (!url || !tag) {
    return callback(true);
  }

  var message = stync.begin('Checking ' + dependency[0] + '...');
  request(createQuery(url), function(err, response, body) {
    if (err) {
      message.end(err);
      return callback(false);
    }

    if (body.message) {
      message.end(' ' + body.message);
      return callback(false);
    }

    var latestVersion = deft.findLatestVersion(body, tag);
    if (latestVersion !== tag) {
      message.end('\x1B[33m newer version available: "' + latestVersion + '" (current "' + tag + '")\x1B[39m');
      return callback(false);
    }

    message.end('\x1B[32m OK!\x1B[39m');
    callback(true);
  });
}

var archives = dependencies.filter(isArchiveDependency);

dependencies = dependencies.filter(deft.not(isArchiveDependency));

if (commander.outdated) {
  if (dependencies.length > 0) {
    async.every(dependencies, checkUpToDate, function(allUpToDate) {
      if (allUpToDate) {
        console.log('All declared dependencies up to date.');
      }
    });
  }

} else {
  if (dependencies.length > 0) {
    async.each(dependencies, downloadDependency, function(err) {
      if (err) {
        console.log('Encountered an error: ' + err);
      }
    });
  }

  if (archives.length > 0) {
    async.eachSeries(archives, downloadArchive, function(err) {
      if (err) {
        console.log('Encountered an error: ' + err);
      }

      if (tempFiles.length === 0 && tempDirs.length === 0) {
        return;
      }

      var message = stync.begin('Cleaning up archive downloads...');
      tempFiles.forEach(function(file) { fs.unlinkSync(file); });
      tempDirs.forEach(function(dir) { rimraf.sync(dir); });
      message.end('Done.');
    });
  }
}
