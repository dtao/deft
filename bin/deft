#!/usr/bin/env node

var fs        = require('fs'),
    path      = require('path'),
    url       = require('url'),
    http      = require('http'),
    https     = require('https'),
    async     = require('async'),
    commander = require('commander'),
    mkdirp    = require('mkdirp'),
    stync     = require('stync'),
    deftInfo  = parseFile('../package.json');

function readFile(filePath, basePath) {
  basePath = basePath || __dirname;
  return fs.readFileSync(path.join(basePath, filePath), 'utf-8');
}

function parseFile(filePath, basePath) {
  return JSON.parse(readFile(filePath, basePath));
}

commander
  .version(deftInfo.version)
  .option('-c, --config-file <path>', 'specify a config file (defaults to deft.json)')
  .option('-f, --force', 'overwrite files that are already present')
  .parse(process.argv);

var configFile   = commander.configFile || 'deft.json',
    config       = parseFile(configFile, process.cwd()),
    destination  = getDestination(config.destination || 'deft'),
    dependencies = config.dependencies || [];

function getDestination(configDestination) {
  if (typeof configDestination === 'string') {
    return { '*': configDestination };
  }

  return configDestination;
}

function getDestinationPath(fileName) {
  var extension = path.extname(fileName),
      folder    = destination[extension] || destination[extension.substring(1)] || destination['*'];

  if (!folder) {
    throw 'Unsure where to save file "' + fileName + '"!';
  }

  return path.join(process.cwd(), folder, fileName);
}

function shouldOverwrite(filePath) {
  if (!(fs.existsSync || path.existsSync)(filePath)) {
    return true;
  }

  return commander.force;
}

function writeFile(filePath, response, callback) {
  // Ensure destination directory exists
  mkdirp.sync(path.dirname(filePath));

  var stream = fs.createWriteStream(filePath);
  response.pipe(stream);
  stream.on('finish', callback);
}

function getFiles(dependency) {
  var files = dependency[dependency.length - 1];

  if (typeof files === 'string') {
    return stringToObject(files);
  }

  if (files instanceof Array) {
    return arrayToObject(files);
  }

  return files;
}

function stringToObject(string) {
  var object = {};
  object[string] = string;
  return object;
}

function arrayToObject(array) {
  var object = {};
  for (var i = 0; i < array.length; ++i) {
    object[array[i]] = array[i];
  }
  return object;
}

function getUrl(file, dependency) {
  if ((/^https?:/).test(dependency[0])) {
    return url.resolve(dependency[0], file);
  }

  var name = dependency[0],
      tag  = dependency.length > 2 ? dependency[1] : 'master';

  return 'https://raw.github.com/' + name + '/' + tag + '/' + file;
}

function downloadDependency(dependency) {
  var files = getFiles(dependency);

  var downloadFile = function(file) {
    var fileUrl         = getUrl(file, dependency),
        httpModule      = (/^https:/).test(fileUrl) ? https : http,
        destinationPath = getDestinationPath(files[file]);

    if (shouldOverwrite(destinationPath)) {
      var message = stync.begin('Downloading ' + file + '...');
      httpModule.get(fileUrl, function(response) {
        message.write(' received response...');

        writeFile(destinationPath, response, function() {
          message.end(' Done.');
        });
      });

    } else {
      console.log(file + ' - already present');
    }
  };

  async.each(Object.keys(files), downloadFile, function(err) {
    if (err) {
      console.log('Error downloading file: ' + err);
    }
  });
}

async.each(dependencies, downloadDependency, function(err) {
  if (err) {
    console.log('Errors were encountered: ' + err);
  }
});
